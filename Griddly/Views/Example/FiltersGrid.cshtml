@{
    List<SelectListItem> groupedList = new List<SelectListItem>()
    {
        new SelectListItemGroup()
        {
            Text = "Group1",
            Items = new List<SelectListItem>()
            {
                new SelectListItem() { Text = "Item1", Value = "Item1" },
                new SelectListItem() { Text = "Item2", Value = "Item2" },
                new SelectListItem() { Text = "Item3", Value = "Item3" },
                new SelectListItem() { Text = "Item4", Value = "Item4" },
                new SelectListItem() { Text = "Item5", Value = "Item5" },
            }
        },
        new SelectListItemGroup()
        {
            Text = "Group2",
            Items = new List<SelectListItem>()
            {
                new SelectListItem() { Text = "Item6", Value = "Item6" },
                new SelectListItem() { Text = "Item7", Value = "Item7" },
                new SelectListItem() { Text = "Item8", Value = "Item8" },
                new SelectListItem() { Text = "Item9", Value = "Item9" },
                new SelectListItem() { Text = "Item10", Value = "Item10" },
            }
        }
    };

    var gridSettings = new GriddlySettings<TestGridItem>()
    {
        PageSize = 20,
        RowClickUrl = x => "http://microsoft.com",
        EmptyGridMessageTemplate = @<text><div class="alert alert-warning">@item.Settings.EmptyGridMessage</div></text>,
        EmptyGridMessage = "Sorry, no records were found"
    };

    // Filters on columns
    gridSettings
        .Column(x => x.Id)
        .Column(x => x.Item, filter: x => x.FilterList(groupedList, nullItemText: "[Not Set]", inputHtmlAttributes: new { data_test_attribute = "This is a Test!" }))
        .Column(x => x.FirstName, "First Name")
        .Column(x => x.LastName, "Last Name", filter: x => x.FilterBox(FilterDataType.String))
        .Column(x => x.Address)
        .Column(x => x.City)
        .Column(x => x.State, filter: x =>
        {
            GriddlyFilterList filter = x.FilterList(TestGridItem.UsStates);
            filter.DisplayItemCount = 2;
            return filter;
        })
        .Column(x => x.PostalCode, "Zip")
        .Column(x => x.Quantity, filter: x => x.FilterRange(FilterDataType.Integer))
        .Column(x => x.Total, format: "c")
        .Column(x => x.Date, filter: x => x.FilterRange(FilterDataType.Date))
        .Column(x => x.IsApproved, "Approved", filter: x => x.FilterBool(nullItemText: "Both", isNoneAll: true));

    // Non-column based filter:
    gridSettings.FilterBool("totalPositive", "Total Is Positive", nullItemText: "All");

    // Custom HTML filter:
    gridSettings.Add(new GriddlyHtmlFilter()
    {
        Caption = "First Name",
        Field = "firstName",
        DataType = FilterDataType.String,
        HtmlTemplate = @<input class="form-control" name="firstName" type="text" value="@item.Filter.GetFormattedValue(item.DefaultValue)"
                               placeholder="This is a custom html filter. It can be used for all sorts of things." />
    });

}

@Html.Griddly(gridSettings)