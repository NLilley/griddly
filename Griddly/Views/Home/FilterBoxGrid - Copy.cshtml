
@{
    ViewBag.Title = "TestGrid";

    List<SelectListItem> groupedList = new List<SelectListItem>()
    {
        new SelectListItemGroup()
        {
            Text = "Group1",
            Items = new List<SelectListItem>()
            {
                new SelectListItem() { Text = "Item1", Value = "Item1" },
                new SelectListItem() { Text = "Item2", Value = "Item2" },
                new SelectListItem() { Text = "Item3", Value = "Item3" },
                new SelectListItem() { Text = "Item4", Value = "Item4" },
                new SelectListItem() { Text = "Item5", Value = "Item5" },
            }
        },
        new SelectListItemGroup()
        {
            Text = "Group2",
            Items = new List<SelectListItem>()
            {
                new SelectListItem() { Text = "Item6", Value = "Item6", Selected = true },
                new SelectListItem() { Text = "Item7", Value = "Item7", Selected = true },
                new SelectListItem() { Text = "Item8", Value = "Item8", Selected = true },
                new SelectListItem() { Text = "Item9", Value = "Item9", Selected = true },
                new SelectListItem() { Text = "Item10", Value = "Item10", Selected = true },
            }
        }
    };
}

@Html.Griddly(new GriddlySettings<TestGridItem>()
    {
        PageSize = 5,
        RowClickUrl = x => "http://microsoft.com",
        Buttons = new List<GriddlyButton>()
        {
            new GriddlyButton() { Text = "Dropdown Test" }
                .Add(new GriddlyButton() { Text = "UrlHelper Test", Argument = Url.Action("About") })
        }
    }
    .Column("test", template: @<a href="http://google.com">google</a>, summaryValue: "Total")
    .Column(x => x.Test, "Sum", format: "c", summaryFunction: SummaryAggregateFunction.Sum)
    .Column(x => x.Test, "Min", format: "c", summaryFunction: SummaryAggregateFunction.Min, filter: x => x.FilterList(new[] { new SelectListItem() { Text = "xxx" } }, nullItemText: "[none]", isNoneAll: true))
    .Column(x => x.Test, "Max", format: "c", summaryFunction: SummaryAggregateFunction.Max)
    .Column(x => x.Test, "Avg", format: "c", summaryFunction: SummaryAggregateFunction.Average, filter: x => x.FilterList(groupedList))
    .Column(x => x.FirstName, "First Name", filter: x =>
    {
        GriddlyFilterList filter = x.FilterList(TestGridItem.UsStates);

        filter.CaptionPlural = "State";
        filter.DisplayItemCount = 2;

        return filter;
    })
    .Column(x => x.LastName, "Last Name", defaultSort: SortDirection.Ascending, filter: x => x.FilterBox(FilterDataType.String))
    .Column(x => x.Company, "Company", filter: x => x.FilterBox(FilterDataType.Decimal))
    .Column(x => x.Address, "Address", filter: x => x.FilterBox(FilterDataType.Currency))
    .Column(x => x.City, "City", filter: x => x.FilterBox(FilterDataType.Date))
    .Column(x => x.PostalCode, "Zip", filter: x => x.FilterBox(FilterDataType.Integer))
    .Button(x => "javascript:void(0)", "Search", className: "btn-search", action: GriddlyButtonAction.Navigate )
        .Add(new GriddlyButton("btn-search") { Text = "Show Filter Form" })

//.Filters.Add(new GriddlyFilterBox() { Caption = "Test Form Filter", Field = "Test Form Field" })
)